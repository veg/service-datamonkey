name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
      continue-on-error: true  # Don't fail CI on lint warnings initially

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Build
      run: |
        cd go
        go build -v -o ../bin/service-datamonkey

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: service-datamonkey
        path: bin/service-datamonkey
        retention-days: 7

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run unit tests
      run: |
        # Measure coverage for all code in ./go package
        # Note: This includes API handlers and chat flow, but they show 0% which is expected
        go test -v -race -coverprofile=coverage.out -covermode=atomic -coverpkg=./go ./go/tests/...
      env:
        RUN_INTEGRATION_TESTS: "false"

    - name: Generate coverage report
      run: |
        echo "## Coverage Report (Core Infrastructure Only)" > coverage.txt
        echo "Excluding: api_*.go, chat_flow.go, model_*.go, routers.go" >> coverage.txt
        echo "" >> coverage.txt
        ./scripts/filter-coverage.sh >> coverage.txt
        cat coverage.txt

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.txt
        retention-days: 30

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 50.0" | bc -l) )); then
          echo "::warning::Coverage is below 50% (${COVERAGE}%)"
        fi

    - name: Test Summary
      if: always()
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ $? -eq 0 ]; then
          echo "✅ All unit tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out | tail -10 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
