/*
 * Datamonkey API
 *
 * Datamonkey is a free public server for comparative analysis of sequence alignments using state-of-the-art statistical models. <br> This is the OpenAPI definition for the Datamonkey API.
 *
 * API version: 1.0.0
 * Contact: spond@temple.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datamonkey

import (
	"log"

	"github.com/gin-gonic/gin"
)

type HealthAPI struct {
	Scheduler           SchedulerInterface
	DatasetTracker      DatasetTracker
	JobTracker          JobTracker
	ConversationTracker ConversationTracker
	GenkitClient        *GenkitClient
}

// TODO: port should be configurable, in the go app, dockerfile, docker-compose, etc via environment variables

// Get /api/v1/health
// Check health of Datamonkey
func (api *HealthAPI) GetHealth(c *gin.Context) {
	log.Println("Checking health of Datamonkey")

	overallStatus := "healthy"
	details := gin.H{}

	// Check job scheduler health
	schedulerStatus := "unknown"
	if api.Scheduler != nil {
		isHealthy, schedulerDetails, err := api.Scheduler.CheckHealth()
		if err != nil {
			log.Printf("Scheduler health check error: %v", err)
			schedulerStatus = "unhealthy"
			overallStatus = "unhealthy"
		} else if !isHealthy {
			log.Printf("Scheduler unhealthy: %s", schedulerDetails)
			schedulerStatus = "unhealthy"
			overallStatus = "unhealthy"
		} else {
			schedulerStatus = "healthy"
		}
	}
	details["job_scheduler"] = schedulerStatus

	// Check database health (via trackers)
	databaseStatus := "unknown"
	if api.DatasetTracker != nil && api.JobTracker != nil && api.ConversationTracker != nil {
		// Try a simple operation to verify database connectivity
		_, err := api.JobTracker.ListJobsByUser("health-check-test-user")
		if err != nil {
			log.Printf("Database health check error: %v", err)
			databaseStatus = "unhealthy"
			overallStatus = "unhealthy"
		} else {
			databaseStatus = "healthy"
		}
	}
	details["database"] = databaseStatus

	// Check Datamonkey API service health
	// If we got here, the API is responding
	details["datamonkey"] = "healthy"

	// Check LLM/AI service health
	llmStatus := "unknown"
	if api.GenkitClient != nil {
		// Genkit client exists, assume healthy
		// (actual health check would require a test call)
		llmStatus = "healthy"
	} else {
		// No Genkit client configured
		llmStatus = "unavailable"
	}
	details["llm"] = llmStatus

	// Determine HTTP status code based on overall health
	statusCode := 200
	if overallStatus == "unhealthy" {
		statusCode = 503
	}

	log.Printf("Health check complete: %s", overallStatus)
	c.JSON(statusCode, gin.H{"status": overallStatus, "details": details})
}
