/*
 * Datamonkey API
 *
 * Datamonkey is a free public server for comparative analysis of sequence alignments using state-of-the-art statistical models. <br> This is the OpenAPI definition for the Datamonkey API.
 *
 * API version: 1.0.0
 * Contact: spond@temple.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datamonkey

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

type SLATKINAPI struct {
	HyPhyBaseAPI
}

// NewSLATKINAPI creates a new SLATKINAPI instance
func NewSLATKINAPI(basePath, hyPhyPath string, scheduler SchedulerInterface, datasetTracker DatasetTracker, jobTracker JobTracker) *SLATKINAPI {
	return &SLATKINAPI{
		HyPhyBaseAPI: NewHyPhyBaseAPI(basePath, hyPhyPath, scheduler, datasetTracker, jobTracker),
	}
}

// formatSLATKINJobResults formats the raw JSON results for SLATKIN jobs
func (api *SLATKINAPI) formatSLATKINJobResults(jobId string, rawResults json.RawMessage) (map[string]interface{}, error) {
	// Log the raw results for debugging
	log.Printf("Raw results: %s", string(rawResults))

	// Check if the raw results are valid JSON
	var testMap map[string]interface{}
	if err := json.Unmarshal(rawResults, &testMap); err != nil {
		log.Printf("Raw results are not valid JSON: %v", err)
	} else {
		log.Printf("Raw results are valid JSON with %d top-level keys", len(testMap))
		for k := range testMap {
			log.Printf("Found top-level key: %s", k)
		}
	}

	// Create a wrapper structure to match the expected format
	wrappedJSON := fmt.Sprintf(`{"job_id":"%s","result":%s}`, jobId, string(rawResults))
	log.Printf("Wrapped JSON: %s", wrappedJSON)

	var slatkinResult SlatkinResult
	if err := json.Unmarshal([]byte(wrappedJSON), &slatkinResult); err != nil {
		log.Printf("Error unmarshaling wrapped results: %v", err)
		// Try to unmarshal as a generic map to see what's in there
		var resultAsMap map[string]interface{}
		if mapErr := json.Unmarshal(rawResults, &resultAsMap); mapErr != nil {
			log.Printf("Error unmarshaling as map: %v", mapErr)
		} else {
			log.Printf("Results as map: %+v", resultAsMap)
		}
		return nil, fmt.Errorf("failed to parse results: %v", err)
	}

	// Log the parsed result structure
	log.Printf("Parsed SlatkinResult: %+v", slatkinResult)

	// Return the result directly as a map to match the API spec
	// The spec expects: {"job_id": "...", "result": {...}}
	resultMap := map[string]interface{}{
		"job_id": jobId,

		"results": rawResults,
	}

	return resultMap, nil
}

// GetSlatkinResults retrieves the status and results of a SLATKIN job
func (api *SLATKINAPI) GetSlatkinResults(c *gin.Context) {
	var request SlatkinRequest
	if err := c.BindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to parse job configuration"})
		return
	}

	adapted, err := AdaptRequest(&request)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to adapt request: %v", err)})
		return
	}

	result, err := api.HandleGetJob(c, adapted, MethodSLATKIN)
	if err != nil {
		if err.Error() == "job is not complete" {
			c.JSON(http.StatusConflict, gin.H{"error": err.Error()})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	// Parse the raw JSON results into SlatkinResult
	resultMap := result.(map[string]interface{})

	// Get the job ID from the result map
	jobId := resultMap["jobId"].(string)

	// Get the raw results
	rawResults := resultMap["results"].(json.RawMessage)

	// Format the results using the shared utility function
	formattedResult, err := api.formatSLATKINJobResults(jobId, rawResults)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, formattedResult)
}

// StartSlatkinJob starts a new SLATKIN analysis job
func (api *SLATKINAPI) StartSlatkinJob(c *gin.Context) {
	// Validate user token if token validator is available
	if api.UserTokenValidator != nil {
		_, err := api.UserTokenValidator.ValidateUserToken(c)
		if err != nil {
			if err.Error() == "missing user token" || strings.Contains(err.Error(), "invalid user token") {
				c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized - " + err.Error()})
				return
			}
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Authentication error: " + err.Error()})
			return
		}
	}

	var request SlatkinRequest
	if err := c.BindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to parse job configuration"})
		return
	}

	// Extract the user token from the request or from the header/query parameter
	if request.UserToken == "" && api.UserTokenValidator != nil {
		userToken := c.Query("user_token")
		if userToken == "" {
			userToken = c.GetHeader("user_token")
		}
		if userToken != "" {
			request.UserToken = userToken
		}
	}

	// Check tree dataset access (SLATKIN only has tree, no alignment)
	if request.Tree != "" && api.UserTokenValidator != nil && api.DatasetTracker != nil {
		_, err := api.UserTokenValidator.CheckDatasetAccess(c, request.Tree, api.DatasetTracker)
		if err != nil {
			if strings.Contains(err.Error(), "missing user token") || strings.Contains(err.Error(), "invalid user token") {
				c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized - " + err.Error()})
				return
			}
			if strings.Contains(err.Error(), "not found") {
				c.JSON(http.StatusNotFound, gin.H{"error": "Tree dataset not found"})
				return
			}
			c.JSON(http.StatusForbidden, gin.H{"error": "Forbidden - You don't have access to this tree"})
			return
		}
	}

	adapted, err := AdaptRequest(&request)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to adapt request: %v", err)})
		return
	}

	result, err := api.HandleStartJob(c, adapted, MethodSLATKIN)
	if err != nil {
		if err.Error() == "authentication token required" {
			c.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	c.JSON(http.StatusOK, result)
}

// GetSlatkinResultsById retrieves the status and results of a SLATKIN job by job ID from query parameter
func (api *SLATKINAPI) GetSlatkinResultsById(c *gin.Context) {
	// Get job ID from query parameter
	jobId := c.Query("job_id")
	if jobId == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Missing job_id parameter"})
		return
	}

	// Use the shared helper to get job results
	result, err := api.HyPhyBaseAPI.HandleGetJobById(jobId, MethodSLATKIN)
	if err != nil {
		if err.Error() == "job not found" || err.Error() == "failed to get job status" || strings.Contains(err.Error(), "failed to read results") {
			c.JSON(http.StatusNotFound, gin.H{
				"error":  "Job not found",
				"status": 404,
				"job_id": jobId,
			})
		} else if err.Error() == "job is not complete" {
			c.JSON(http.StatusConflict, gin.H{"error": "Job is not complete"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to get job results: %v", err)})
		}
		return
	}

	// Parse the raw JSON results into SlatkinResult
	resultMap, ok := result.(map[string]interface{})
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Invalid result format"})
		return
	}

	// Extract the raw JSON results
	rawResults, ok := resultMap["results"].(json.RawMessage)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Invalid results format"})
		return
	}

	// Format the results using the shared utility function
	formattedResult, err := api.formatSLATKINJobResults(jobId, rawResults)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, formattedResult)
}
